version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: arcpilot-postgres
    environment:
      POSTGRES_DB: arcpilot
      POSTGRES_USER: arcpilot
      POSTGRES_PASSWORD: arcpilot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arcpilot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - arcpilot-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: arcpilot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - arcpilot-network

  # Kafka (for event streaming)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: arcpilot-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - arcpilot-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: arcpilot-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - arcpilot-network

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: arcpilot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - arcpilot-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: arcpilot-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - arcpilot-network

  # API Gateway (Rust)
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: arcpilot-api-gateway
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgresql://arcpilot:arcpilot_password@postgres:5432/arcpilot
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      API_PORT: 8080
      RUST_LOG: info,api_gateway=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - arcpilot-network
    profiles:
      - full

  # AI Engine (Rust + Python)
  ai-engine:
    build:
      context: .
      dockerfile: ./ai-engine/Dockerfile
    container_name: arcpilot-ai-engine
    ports:
      - "8081:8081"
    environment:
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      AI_ENGINE_PORT: 8081
      RUST_LOG: info,ai_engine=debug
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - arcpilot-network
    profiles:
      - full

  # Blockchain Executor (Rust)
  blockchain-executor:
    build:
      context: .
      dockerfile: ./blockchain-executor/Dockerfile
    container_name: arcpilot-blockchain-executor
    ports:
      - "8082:8082"
    environment:
      DATABASE_URL: postgresql://arcpilot:arcpilot_password@postgres:5432/arcpilot
      REDIS_URL: redis://redis:6379
      EXECUTOR_PORT: 8082
      RUST_LOG: info,blockchain_executor=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - arcpilot-network
    profiles:
      - full

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: arcpilot-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: ws://localhost:8080/ws
    depends_on:
      - api-gateway
    networks:
      - arcpilot-network
    profiles:
      - full

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  arcpilot-network:
    driver: bridge

